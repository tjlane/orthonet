#!/usr/bin/env python

import os
import h5py
import argparse
import numpy as np

import torch
import torch.utils.data
from torch.nn import functional as F
from torchvision import datasets, transforms
from torchvision.utils import save_image

from orthonet.models import VAE, AE
from orthonet import visual
from orthonet import jacob
from orthonet.utils import binary_normalize


def parse_args():

    parser = argparse.ArgumentParser(description='run VAE on simple simulation')
    parser.add_argument('data_file', type=str, help='data file to load')
    parser.add_argument('--model-type', type=str, choices=['ae', 'vae'],
                        required=True, default='ae',
                        help='{ae, vae}')
    parser.add_argument('--batch-size', type=int, default=32, metavar='N',
                        help='input batch size for training (default: 64)')
    parser.add_argument('--epochs', type=int, default=250, metavar='N',
                        help='number of epochs to train (default: 250)')
    parser.add_argument('--latent-size', type=int, default=10, metavar='N',
                        help='size of latent layer (default: 10)')
    parser.add_argument('--vaebeta', type=float, default=1.0, metavar='N',
                        help='vae beta parameter (default: 1.0)')
    parser.add_argument('--obeta', type=float, default=1.0, metavar='N',
                        help='ortho beta parameter (default: 1.0)')
    parser.add_argument('--dbeta', type=float, default=1.0, metavar='N',
                        help='diagn beta parameter (default: 1.0)')
    parser.add_argument('--no-cuda', action='store_true', default=False,
                        help='enables CUDA training')
    args = parser.parse_args()

    return args


def setup_device(args):

    #torch.manual_seed(1)

    args.cuda = not args.no_cuda and torch.cuda.is_available()
    device_type = "cuda" if args.cuda else "cpu"
    device = torch.device(device_type)
    print("Device: %s" % device_type)

    loader_kwargs = {'num_workers': 1, 'pin_memory': True} if args.cuda else {}

    return device, loader_kwargs


def load_data(data_file, batch_size, loader_kwargs={}, traintest_split=0.9):

    f = h5py.File(data_file)
    data = np.array(f['data']).astype(np.float32) # are now binary
    data = data[:100] # FOR TESTING
    print('shp:', data.shape)
    f.close()

    split = int(data.shape[0] * traintest_split)
    size  = data.shape[0]

    print('\tTrain/Test: %d/%d' % (split, size-split))

    train_data = torch.stack([torch.tensor(data[i]) for i in range(0, split)])
    test_data  = torch.stack([torch.tensor(data[i]) for i in range(split, size)])

    train_loader = torch.utils.data.DataLoader( 
            torch.utils.data.TensorDataset(train_data),
        batch_size=batch_size, shuffle=True, **loader_kwargs)

    test_loader = torch.utils.data.DataLoader(
            torch.utils.data.TensorDataset(test_data),
        batch_size=batch_size, shuffle=True, **loader_kwargs)

    return train_loader, test_loader, data.shape

# ---------------------------------------------------------------------------------


def save_comparison(epoch, x, y, batch_size):
    n = min(x.shape[0], 8)
    comp_shp = (min(batch_size, x.shape[0]), 1, *x.shape[1:])
    comparison = torch.cat([x.view(*comp_shp)[:n],
                            y.view(*comp_shp)[:n]])
    save_image(comparison.cpu(),
               'results/reconstructions/reconstruction_%d.png' % epoch, nrow=n)
    return


def fwd_pass(model, data):

    z = model.encode(data)
    y = model.decode(z)

    # enables flexible model code
    #if type(y) is not tuple:
    #    y = (y,)

    bce = F.binary_cross_entropy(y, data.view(y.shape), reduction='sum')
    jgl = model.ortho_beta * jacob.jg_loss(model.decode, z, model.input_size,
                                           diagonal_weight=model.diagn_beta,
                                           reduction='sum')
    return bce, jgl, z, y


def train(epoch, train_loader, model):

    optimizer = torch.optim.Adam(model.parameters(), lr=1e-3/epoch)

    model.train()
    train_loss = 0.0
    bce_loss   = 0.0
    jgl_loss   = 0.0

    for batch_idx, (data,) in enumerate(train_loader):

        data = data.to(device)
        bce, jgl, _, _ = fwd_pass(model, data)

        bce_loss += bce.item()
        jgl_loss += jgl.item()
        train_loss += bce.item() + jgl.item()

        optimizer.zero_grad()
        bce.backward(retain_graph=True)
        jgl.backward(retain_graph=True)
        optimizer.step()

        if batch_idx % 10 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader),
                bce.item() / len(data)))
            print('             BCE: {:.2e} / JAC: {:.2e}'.format(
                  bce_loss, jgl_loss))

    avg_loss = train_loss / len(train_loader.dataset)
    print('====> Epoch: {} Average loss: {:.4f}'.format(
          epoch, avg_loss))

    bce_avg = bce_loss / len(train_loader.dataset)
    jgl_avg = jgl_loss / len(train_loader.dataset)

    return avg_loss, bce_avg, jgl_avg


def test(epoch, test_loader, model):

    model.eval()
    test_loss = 0

    with torch.no_grad():

        for i, (data,) in enumerate(test_loader):

            data = data.to(device)
            bce, jgl, z, y = fwd_pass(model, data)
            test_loss += bce.item() + jgl.item()

            # save a comparison between the data and reconstruction
            if i == 0:
                save_comparison(epoch, data, y, test_loader.batch_size) 

    test_loss /= len(test_loader.dataset)
    print('====> Test set loss: {:.4f}'.format(test_loss))

    return test_loss


def main():

    args = parse_args()

    global device
    device, loader_kwargs = setup_device(args)

    train_loader, test_loader, data_shape = load_data(args.data_file, 
                                                      args.batch_size, 
                                                      loader_kwargs=loader_kwargs)

    for dirc in ['results', 'results/reconstructions', 'results/samples']:
        if not os.path.exists(dirc):
            os.mkdir(dirc)


    # -------------------

    field_shape = data_shape[1:]
    input_size  = np.product(field_shape)
    latent_size = args.latent_size

    if args.model_type == 'ae':
        model = AE(input_size, latent_size)
    elif args.model_type == 'vae':
        model = VAE(input_size, latent_size)

    # pass on parameters by ducktyping
    model.ortho_beta = args.obeta
    model.diagn_beta = args.dbeta

    #if torch.cuda.device_count() > 1:
    #    n_to_use = 4
    #    device_ids = range(0,n_to_use)
    #    print("Using:", n_to_use, 'of', torch.cuda.device_count(), "GPUs")
    #    #model = OpenDataParallel(model, device_ids=device_ids, output_device=0)
    #    model = OpenDataParallel(model)

    model.to(device)

    # -------------------

    train_loss  = np.zeros((args.epochs, 3))
    test_loss   = np.zeros(args.epochs)

    for epoch in range(1, args.epochs + 1):

        train_loss[epoch-1,:]  = train(epoch, train_loader, model)
        test_loss[epoch-1]     = test(epoch, test_loader,  model)

        with torch.no_grad():

            # generate some random samples
            sample = torch.randn(64, args.latent_size).to(device)
            sample = model.decode(sample).cpu()
            save_image(sample.view(64, 1, *field_shape),
                       'results/samples/sample_%d.png' % epoch)

    with torch.no_grad():

        # traverse each latent dimension
        n_latent_samples = 12 * 4
        for a in range(args.latent_size):
            sample = np.zeros((n_latent_samples, args.latent_size), dtype=np.float32)
            sample[:,a] = np.linspace(-2, 2, n_latent_samples)
            sample = torch.from_numpy(sample).to(device)
            sample = model.decode(sample).cpu()
            save_image(sample.view(n_latent_samples, 1, *field_shape),
                       'results/z' + str(a) + '.png')

        # save the final model
        torch.save(model.cpu(), 'results/model.pt')

    visual.plot_loss_curves(test_loss, train_loss, save='results/loss_curves.png')

    return


if __name__ == "__main__":
    main()

