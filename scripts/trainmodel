#!/usr/bin/env python

import os
import h5py
import argparse
import numpy as np

import torch
import torch.utils.data
from torchvision import datasets, transforms
from torchvision.utils import save_image

from orthonet.models import VAE, AE, OrthoAE
from orthonet import visual
from orthonet.utils import binary_normalize


def parse_args():

    parser = argparse.ArgumentParser(description='run VAE on simple simulation')
    parser.add_argument('data_file', type=str, help='data file to load')
    parser.add_argument('--model-type', type=str, choices=['ae', 'vae', 'ortho'],
                        required=True,
                        help='{ae, vae, ortho}')
    parser.add_argument('--batch-size', type=int, default=128, metavar='N',
                        help='input batch size for training (default: 128)')
    parser.add_argument('--epochs', type=int, default=10, metavar='N',
                        help='number of epochs to train (default: 10)')
    parser.add_argument('--latent-size', type=int, default=4, metavar='N',
                        help='size of latent layer (default: 4)')
    parser.add_argument('--beta', type=float, default=1.0, metavar='N',
                        help='beta parameter (default: 1.0)')
    parser.add_argument('--no-cuda', action='store_true', default=False,
                        help='enables CUDA training')
    parser.add_argument('--seed', type=int, default=1, metavar='S',
                        help='random seed (default: 1)')
    parser.add_argument('--log-interval', type=int, default=10, metavar='N',
                        help='how many batches to wait before logging training status')
    args = parser.parse_args()

    return args


def setup_device(args):

    torch.manual_seed(args.seed)

    args.cuda = not args.no_cuda and torch.cuda.is_available()
    device_type = "cuda" if args.cuda else "cpu"
    device = torch.device(device_type)
    print("Device: %s" % device_type)

    loader_kwargs = {'num_workers': 1, 'pin_memory': True} if args.cuda else {}

    return device, loader_kwargs


def load_data(data_file, batch_size, loader_kwargs={}, traintest_split=0.9):

    f = h5py.File(data_file)
    data = binary_normalize( np.array(f['data']).astype(np.float32) )
    #data = data[:10] # FOR TESTING
    f.close()

    split = int(data.shape[0] * traintest_split)
    size  = data.shape[0]

    print('\tTrain/Test: %d/%d' % (split, size-split))

    train_data = torch.stack([torch.tensor(data[i]) for i in range(0, split)])
    test_data  = torch.stack([torch.tensor(data[i]) for i in range(split, size)])

    train_loader = torch.utils.data.DataLoader( 
            torch.utils.data.TensorDataset(train_data),
        batch_size=batch_size, shuffle=True, **loader_kwargs)

    test_loader = torch.utils.data.DataLoader(
            torch.utils.data.TensorDataset(test_data),
        batch_size=batch_size, shuffle=True, **loader_kwargs)

    return train_loader, test_loader, data.shape

# ---------------------------------------------------------------------------------


def train(epoch, device, train_loader, model, optimizer, log_interval):

    model.train()
    train_loss = 0

    for batch_idx, (data,) in enumerate(train_loader):

        data = data.to(device)
        y = model(data)
        
        # enables flexible model code
        if type(y) is not tuple:
            y = (y,)

        loss = model.loss_function(data, *y)
        train_loss += loss.item()

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if batch_idx % log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader),
                loss.item() / len(data)))

    print('====> Epoch: {} Average loss: {:.4f}'.format(
          epoch, train_loss / len(train_loader.dataset)))

    return train_loss  / len(train_loader.dataset)


def test(epoch, device, test_loader, model, log_interval):

    model.eval()
    test_loss = 0

    with torch.no_grad():

        for i, (data,) in enumerate(test_loader):
            data = data.to(device)
            y = model(data)
            if type(y) is not tuple: y = (y,) 
            loss = model.loss_function(data, *y)
            test_loss += loss.item()

            # save a comparison between the data and reconstruction
            if i == 0:
                recon_batch = y[0]
                n = min(data.size(0), 8)
                comp_shp = (test_loader.batch_size, 1, *data.shape[1:])
                comparison = torch.cat([data.view(*comp_shp)[:n],
                                        recon_batch.view(*comp_shp)[:n]])
                save_image(comparison.cpu(),
                         'results/reconstructions/reconstruction_%d.png' % epoch, nrow=n)

    test_loss /= len(test_loader.dataset)
    print('====> Test set loss: {:.4f}'.format(test_loss))

    return test_loss


def main():

    args = parse_args()

    device, loader_kwargs = setup_device(args)

    train_loader, test_loader, data_shape = load_data(args.data_file, 
                                                      args.batch_size, 
                                                      loader_kwargs=loader_kwargs)

    for dirc in ['results', 'results/reconstructions', 'results/samples']:
        if not os.path.exists(dirc):
            os.mkdir(dirc)


    # -------------------

    field_shape = data_shape[1:]
    input_size  = np.product(field_shape)
    latent_size = args.latent_size

    if args.model_type == 'ae':
        model = AE(input_size, latent_size)
    elif args.model_type == 'vae':
        model = VAE(input_size, latent_size)
    elif args.model_type == 'ortho':
        model = OrthoAE(input_size, latent_size, beta=1.0)

    model.to(device)
    optimizer = torch.optim.Adam(model.parameters(), lr=1e-3, weight_decay=0.1)

    # -------------------

    test_loss  = np.zeros(args.epochs)
    train_loss = np.zeros(args.epochs)

    for epoch in range(1, args.epochs + 1):

        test_loss[epoch-1]  = train(epoch, device, train_loader, model, optimizer, args.log_interval)
        train_loss[epoch-1] = test(epoch,  device, test_loader,  model, args.log_interval)

        with torch.no_grad():

            # generate some random samples
            sample = torch.randn(64, args.latent_size).to(device)
            sample = model.decode(sample).cpu()
            save_image(sample.view(64, 1, *field_shape),
                       'results/samples/sample_%d.png' % epoch)

    with torch.no_grad():

        # traverse each latent dimension
        for a in range(args.latent_size):
            sample = np.zeros((12, args.latent_size), dtype=np.float32)
            sample[:,a] = np.linspace(-2, 2, 12)
            sample = torch.from_numpy(sample).to(device)
            sample = model.decode(sample).cpu()
            save_image(sample.view(12, 1, *field_shape),
                       'results/z' + str(a) + '.png')

        # embed all the data into the latent space and save
        view_data = test_loader.dataset.tensors[0]
        ip = view_data.view(-1,input_size).to(device)
        code = model.encode(ip)
        dec  = model(ip)
        if type(dec) is tuple: dec = dec[0] # hack
        f = h5py.File('results/encoding.h5', 'w')
        f['latent'] = np.array([ c.cpu().numpy() for c in code ])
        f['input']  = np.array(view_data.cpu())
        f['recon']  = np.array(dec.cpu().view(*view_data.shape))
        f.close()

        # save the final model
        torch.save(model.cpu(), 'results/model.pt')

    visual.plot_loss_curves(test_loss, train_loss, save='results/loss_curves.png')

    return


if __name__ == "__main__":
    main()

